<?xml version="1.0"?>
<doc>
    <assembly>
        <name>sfmlnet-audio</name>
    </assembly>
    <members>
        <member name="T:SFML.Audio.SoundBuffer">
            <summary>
            SoundBuffer is the low-level class for loading and manipulating
            sound buffers. A sound buffer holds audio data (samples)
            which can then be played by a Sound or saved to a file.
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundBuffer.#ctor(System.String)">
            <summary>
            Construct the sound buffer from a file
            </summary>
            <param name="filename">Path of the sound file to load</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Audio.SoundBuffer.#ctor(System.IO.Stream)">
            <summary>
            Construct the sound buffer from a file in a stream
            </summary>
            <param name="stream">Stream containing the file contents</param>
        </member>
        <member name="M:SFML.Audio.SoundBuffer.#ctor(System.Int16[],System.UInt32,System.UInt32)">
            <summary>
            Construct the sound buffer from an array of samples
            </summary>
            <param name="samples">Array of samples</param>
            <param name="channelsCount">Channels count</param>
            <param name="sampleRate">Sample rate</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Audio.SoundBuffer.SaveToFile(System.String)">
            <summary>
            Save the sound buffer to an audio file
            </summary>
            <param name="filename">Path of the sound file to write</param>
            <returns>True if saving has been successful</returns>
        </member>
        <member name="M:SFML.Audio.SoundBuffer.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="P:SFML.Audio.SoundBuffer.SampleRate">
            <summary>
            Samples rate, in samples per second
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundBuffer.ChannelsCount">
            <summary>
            Number of channels (1 = mono, 2 = stereo)
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundBuffer.Duration">
            <summary>
            Total duration of the buffer, in seconds
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundBuffer.Samples">
            <summary>
            Array of samples contained in the buffer
            </summary>
        </member>
        <member name="T:SFML.Audio.SoundStatus">
            <summary>
            Enumeration of all possible sound states
            </summary>
        </member>
        <member name="F:SFML.Audio.SoundStatus.Stopped">
            <summary>Sound is not playing</summary>
        </member>
        <member name="F:SFML.Audio.SoundStatus.Paused">
            <summary>Sound is paused</summary>
        </member>
        <member name="F:SFML.Audio.SoundStatus.Playing">
            <summary>Sound is playing</summary>
        </member>
        <member name="T:SFML.Audio.Sound">
            <summary>
            Sound defines the properties of a sound such as position,
            volume, pitch, etc.
            </summary>
        </member>
        <member name="M:SFML.Audio.Sound.#ctor">
            <summary>
            Default constructor (invalid sound)
            </summary>
        </member>
        <member name="M:SFML.Audio.Sound.#ctor(SFML.Audio.SoundBuffer)">
            <summary>
            Construct the sound from a source buffer
            </summary>
            <param name="buffer">Sound buffer to play</param>
        </member>
        <member name="M:SFML.Audio.Sound.Play">
            <summary>
            Play the sound
            </summary>
        </member>
        <member name="M:SFML.Audio.Sound.Pause">
            <summary>
            Pause the sound
            </summary>
        </member>
        <member name="M:SFML.Audio.Sound.Stop">
            <summary>
            Stop the sound
            </summary>
        </member>
        <member name="M:SFML.Audio.Sound.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="P:SFML.Audio.Sound.SoundBuffer">
            <summary>
            Buffer containing the sound data to play through the sound
            </summary>
        </member>
        <member name="P:SFML.Audio.Sound.Status">
            <summary>
            Current status of the sound (see SoundStatus enum)
            </summary>
        </member>
        <member name="P:SFML.Audio.Sound.Loop">
            <summary>
            Loop state of the sound. Default value is false
            </summary>
        </member>
        <member name="P:SFML.Audio.Sound.Pitch">
            <summary>
            Pitch of the sound. Default value is 1
            </summary>
        </member>
        <member name="P:SFML.Audio.Sound.Volume">
            <summary>
            Volume of the sound, in range [0, 100]. Default value is 100
            </summary>
        </member>
        <member name="P:SFML.Audio.Sound.PlayingOffset">
            <summary>
            Current playing position of the sound, in seconds
            </summary>
        </member>
        <member name="P:SFML.Audio.Sound.Position">
            <summary>
            3D position of the sound. Default value is (0, 0, 0)
            </summary>
        </member>
        <member name="P:SFML.Audio.Sound.RelativeToListener">
            <summary>
            Is the sound's position relative to the listener's position,
            or is it absolute?
            Default value is false (absolute)
            </summary>
        </member>
        <member name="P:SFML.Audio.Sound.MinDistance">
            <summary>
            Minimum distance of the sound. Closer than this distance,
            the listener will hear the sound at its maximum volume.
            The default value is 1
            </summary>
        </member>
        <member name="P:SFML.Audio.Sound.Attenuation">
            <summary>
            Attenuation factor. The higher the attenuation, the
            more the sound will be attenuated with distance from listener.
            The default value is 1
            </summary>
        </member>
        <member name="T:SFML.Audio.Music">
            <summary>
            Music defines a big sound played using streaming,
            so usually what we call a music :)
            </summary>
        </member>
        <member name="M:SFML.Audio.Music.#ctor(System.String)">
            <summary>
            Construct the music from a file
            </summary>
            <param name="filename">Path of the music file to load</param>
        </member>
        <member name="M:SFML.Audio.Music.#ctor(System.IO.Stream)">
            <summary>
            Construct the music from a file in a stream
            </summary>
            <param name="stream">Stream containing the file contents</param>
        </member>
        <member name="M:SFML.Audio.Music.Play">
            <summary>
            Play the music
            </summary>
        </member>
        <member name="M:SFML.Audio.Music.Pause">
            <summary>
            Pause the music
            </summary>
        </member>
        <member name="M:SFML.Audio.Music.Stop">
            <summary>
            Stop the music
            </summary>
        </member>
        <member name="M:SFML.Audio.Music.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="P:SFML.Audio.Music.SampleRate">
            <summary>
            Samples rate, in samples per second
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.ChannelsCount">
            <summary>
            Number of channels (1 = mono, 2 = stereo)
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.Status">
            <summary>
            Current status of the music (see SoundStatus enum)
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.Duration">
            <summary>
            Total duration of the music, in seconds
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.Loop">
            <summary>
            Loop state of the sound. Default value is false
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.Pitch">
            <summary>
            Pitch of the music. Default value is 1
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.Volume">
            <summary>
            Volume of the music, in range [0, 100]. Default value is 100
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.Position">
            <summary>
            3D position of the music. Default value is (0, 0, 0)
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.RelativeToListener">
            <summary>
            Is the music's position relative to the listener's position,
            or is it absolute?
            Default value is false (absolute)
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.MinDistance">
            <summary>
            Minimum distance of the music. Closer than this distance,
            the listener will hear the sound at its maximum volume.
            The default value is 1
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.Attenuation">
            <summary>
            Attenuation factor. The higher the attenuation, the
            more the sound will be attenuated with distance from listener.
            The default value is 1
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.PlayingOffset">
            <summary>
            Current playing position, in seconds
            </summary>
        </member>
        <member name="T:SFML.Audio.Vector3">
            <summary>
            Vector3 is an utility class for manipulating 3 dimensional
            vectors with float components
            </summary>
        </member>
        <member name="M:SFML.Audio.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Construct the vector from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
        </member>
        <member name="M:SFML.Audio.Vector3.op_UnaryNegation(SFML.Audio.Vector3)">
            <summary>
            Operator - overload ; returns the opposite of a vector
            </summary>
            <param name="v">Vector to negate</param>
            <returns>-v</returns>
        </member>
        <member name="M:SFML.Audio.Vector3.op_Subtraction(SFML.Audio.Vector3,SFML.Audio.Vector3)">
            <summary>
            Operator - overload ; subtracts two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:SFML.Audio.Vector3.op_Addition(SFML.Audio.Vector3,SFML.Audio.Vector3)">
            <summary>
            Operator + overload ; add two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:SFML.Audio.Vector3.op_Multiply(SFML.Audio.Vector3,System.Single)">
            <summary>
            Operator * overload ; multiply a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v * x</returns>
        </member>
        <member name="M:SFML.Audio.Vector3.op_Multiply(System.Single,SFML.Audio.Vector3)">
            <summary>
            Operator * overload ; multiply a scalar value by a vector
            </summary>
            <param name="x">Scalar value</param>
            <param name="v">Vector</param>
            <returns>x * v</returns>
        </member>
        <member name="M:SFML.Audio.Vector3.op_Division(SFML.Audio.Vector3,System.Single)">
            <summary>
            Operator / overload ; divide a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v / x</returns>
        </member>
        <member name="F:SFML.Audio.Vector3.X">
            <summary>X (horizontal) component of the vector</summary>
        </member>
        <member name="F:SFML.Audio.Vector3.Y">
            <summary>Y (vertical) component of the vector</summary>
        </member>
        <member name="F:SFML.Audio.Vector3.Z">
            <summary>Z (depth) component of the vector</summary>
        </member>
        <member name="T:SFML.Audio.SoundRecorder">
            <summary>
            SoundRecorder is an interface for capturing sound data,
            it is meant to be used as a base class
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.Start">
            <summary>
            Start the capture using default sample rate (44100 Hz)
            Warning : only one capture can happen at the same time
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.Start(System.UInt32)">
            <summary>
            Start the capture.
            Warning : only one capture can happen at the same time
            </summary>
            <param name="sampleRate"> Sound frequency; the more samples, the higher the quality (44100 by default = CD quality)</param>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.Stop">
            <summary>
            Stop the capture
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.OnStart">
            <summary>
            Called when a new capture starts
            </summary>
            <returns>False to abort recording audio data, true to continue</returns>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.OnProcessSamples(System.Int16[])">
            <summary>
            Process a new chunk of recorded samples
            </summary>
            <param name="samples">Array of samples to process</param>
            <returns>False to stop recording audio data, true to continue</returns>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.OnStop">
            <summary>
            Called when the current capture stops
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.ProcessSamples(System.IntPtr,System.UInt32,System.IntPtr)">
            <summary>
            Function called directly by the C library ; convert
            arguments and forward them to the internal virtual function
            </summary>
            <param name="samples">Pointer to the array of samples</param>
            <param name="nbSamples">Number of samples in the array</param>
            <param name="userData">User data -- unused</param>
            <returns>False to stop recording audio data, true to continue</returns>
        </member>
        <member name="P:SFML.Audio.SoundRecorder.SampleRate">
            <summary>
            Sample rate of the recorder, in samples per second
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundRecorder.CanCapture">
            <summary>
            Tell if the system supports sound capture.
            If not, this class won't be usable
            </summary>
        </member>
        <member name="T:SFML.Audio.SoundBufferRecorder">
            <summary>
            Specialized SoundRecorder which saves the captured
            audio data into a sound buffer
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundBufferRecorder.OnStart">
            <summary>
            Called when a new capture starts
            </summary>
            <returns>False to abort recording audio data, true to continue</returns>
        </member>
        <member name="M:SFML.Audio.SoundBufferRecorder.OnProcessSamples(System.Int16[])">
            <summary>
            Process a new chunk of recorded samples
            </summary>
            <param name="samples">Array of samples to process</param>
            <returns>False to stop recording audio data, true to continue</returns>
        </member>
        <member name="M:SFML.Audio.SoundBufferRecorder.OnStop">
            <summary>
            Called when the current capture stops
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundBufferRecorder.SoundBuffer">
            <summary>
            Sound buffer containing the recorded data (invalid until the capture stops)
            </summary>
        </member>
        <member name="T:SFML.Audio.SoundStream">
            <summary>
            SoundStream is a streamed sound, ie. samples are acquired
            while the sound is playing. Use it for big sounds that would
            require hundreds of MB in memory (see Music),
            or for streaming sound from the network
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundStream.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundStream.Play">
            <summary>
            Play the sound stream
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundStream.Pause">
            <summary>
            Pause the sound stream
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundStream.Stop">
            <summary>
            Stop the sound stream
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundStream.Initialize(System.UInt32,System.UInt32)">
            <summary>
            Set the audio stream parameters, you must call it before Play()
            </summary>
            <param name="sampleRate">Number of channels</param>
            <param name="channelsCount">Sample rate, in samples per second</param>
        </member>
        <member name="M:SFML.Audio.SoundStream.OnStart">
            <summary>
            Virtual function called when the stream restarts
            </summary>
            <returns>If false is returned, the playback is aborted</returns>
        </member>
        <member name="M:SFML.Audio.SoundStream.OnGetData(System.Int16[]@)">
            <summary>
            Virtual function called each time new audio data is needed to feed the stream
            </summary>
            <param name="samples">Array of samples to fill for the stream</param>
            <returns>True to continue playback, false to stop</returns>
        </member>
        <member name="M:SFML.Audio.SoundStream.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:SFML.Audio.SoundStream.Start(System.IntPtr)">
            <summary>
            Called when the stream restarts
            </summary>
            <param name="userData">User data -- unused</param>
            <returns>If false is returned, the playback is aborted</returns>
        </member>
        <member name="M:SFML.Audio.SoundStream.GetData(SFML.Audio.SoundStream.Chunk@,System.IntPtr)">
            <summary>
            Called each time new audio data is needed to feed the stream
            </summary>
            <param name="dataChunk">Data chunk to fill with new audio samples</param>
            <param name="userData">User data -- unused</param>
            <returns>True to continue playback, false to stop</returns>
        </member>
        <member name="P:SFML.Audio.SoundStream.SampleRate">
            <summary>
            Samples rate, in samples per second
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundStream.ChannelsCount">
            <summary>
            Number of channels (1 = mono, 2 = stereo)
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundStream.Status">
            <summary>
            Current status of the sound stream (see SoundStatus enum)
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundStream.Loop">
            <summary>
            Loop state of the sound stream. Default value is false
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundStream.Pitch">
            <summary>
            Pitch of the sound stream. Default value is 1
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundStream.Volume">
            <summary>
            Volume of the sound stream, in range [0, 100]. Default value is 100
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundStream.Position">
            <summary>
            3D position of the sound stream. Default value is (0, 0, 0)
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundStream.RelativeToListener">
            <summary>
            Is the sound stream's position relative to the listener's position,
            or is it absolute?
            Default value is false (absolute)
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundStream.MinDistance">
            <summary>
            Minimum distance of the sound stream. Closer than this distance,
            the listener will hear the sound at its maximum volume.
            The default value is 1
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundStream.Attenuation">
            <summary>
            Attenuation factor. The higher the attenuation, the
            more the sound will be attenuated with distance from listener.
            The default value is 1
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundStream.PlayingOffset">
            <summary>
            Current playing position, in seconds
            </summary>
        </member>
        <member name="T:SFML.Audio.SoundStream.Chunk">
            <summary>
            Structure mapping the C library arguments passed to the data callback
            </summary>
        </member>
        <member name="T:SFML.Audio.Listener">
            <summary>
            Listener is a global interface for defining the audio
            listener properties ; the audio listener is the point in
            the scene from where all the sounds are heard
            </summary>
        </member>
        <member name="P:SFML.Audio.Listener.GlobalVolume">
            <summary>
            Global volume of all sounds, in range [0 .. 100] (default is 100)
            </summary>
        </member>
        <member name="P:SFML.Audio.Listener.Position">
            <summary>
            3D position of the listener (default is (0, 0, 0))
            </summary>
        </member>
        <member name="P:SFML.Audio.Listener.Target">
            <summary>
            3D position of the target, ie. the point the listener is looking at
            (default is (0, 0, -1))
            </summary>
        </member>
    </members>
</doc>
